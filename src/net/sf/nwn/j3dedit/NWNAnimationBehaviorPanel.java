/*
 *  $Header: /cvsroot/nwn-j3d/nwn/src/net/sf/nwn/j3dedit/NWNAnimationBehaviorPanel.java,v 1.1 2002/05/01 00:04:52 abies Exp $
 *
 *                         Sun Public License Notice
 *
 *  The contents of this file are subject to the Sun Public License Version
 *  1.0 (the "License"). You may not use this file except in compliance with
 *  the License. A copy of the License is available at http://www.sun.com/
 *
 *  The Original Code is the Java 3D(tm) Scene Graph Editor.
 *  The Initial Developer of the Original Code is Paul Byrne.
 *  Portions created by Paul Byrne are Copyright (C) 2002.
 *  All Rights Reserved.
 *
 *  Contributor(s): Paul Byrne.
 *
 **/
package net.sf.nwn.j3dedit;

import javax.media.j3d.*;
import org.jdesktop.j3dedit.scenegrapheditor.nodeeditors.NodeEditorPanel;

//import com.sun.j3d.demos.j3dedit.scenegraph.SGNode;
//import com.sun.j3d.demos.j3dedit.scenegrapheditor.nodeeditors.NodeEditorPanel;

import net.sf.nwn.loader.AnimationBehavior;

/**
 * @author Paul Byrne
 * @version $Revision: 1.1 $
 */
public class NWNAnimationBehaviorPanel extends NodeEditorPanel {
    
    public NWNAnimationBehaviorPanel() {
        super();
        initComponents();        
    }
    
    /**
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        animationCB = new javax.swing.JComboBox();
        wantLoopC = new javax.swing.JCheckBox();
        replayB = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        animationCB.setToolTipText("Select Animation");
        animationCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                animationCBItemStateChanged(evt);
            }
        });

        jPanel1.add(animationCB, new java.awt.GridBagConstraints());

        wantLoopC.setText("Loop Animation");
        jPanel1.add(wantLoopC, new java.awt.GridBagConstraints());

        replayB.setText("Replay");
        replayB.setToolTipText("null");
        replayB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(replayB, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void replayBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayBActionPerformed
        // Add your handling code here:
        playAnim();
    }//GEN-LAST:event_replayBActionPerformed

    private void animationCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_animationCBItemStateChanged
        // Add your handling code here:
        playAnim();
    }//GEN-LAST:event_animationCBItemStateChanged
    
    private void playAnim() {
                AnimationBehavior behavior = (AnimationBehavior)node.getJ3dNode();
        String str = (String)animationCB.getSelectedItem();
        System.out.println( "Playing "+str );
        //behavior.setAnimationTimeScale( 5 );
        behavior.playAnimation( str, wantLoopC.isSelected() );
    }
    
    /**
     * Permanently apply the changes to the node
     */
    public void applyChanges() {
        
    }
    
    /**
     * Reset the changes to the state when setControls or applyChanges
     * was last called
     */
    public void resetChanges() {
        
    }
    
    /**
     * Set the GUI controls to represent node
     * Store the state of the node so any subsequent changes
     * can be reset
     */
    protected void setControls() {
        AnimationBehavior behavior = (AnimationBehavior)node.getJ3dNode();
        behavior.setDefaultAnimations( new java.util.ArrayList() );
        
        java.util.Set names = behavior.getAllAnimationNames();
        java.util.Iterator it = names.iterator();
        while(it.hasNext())
            animationCB.addItem( it.next() );
    }
    
    protected void setReadCapabilityBits(javax.media.j3d.Node node) {
    }
    
    protected void setReadWriteCapabilityBits(javax.media.j3d.Node node) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton replayB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox wantLoopC;
    private javax.swing.JComboBox animationCB;
    // End of variables declaration//GEN-END:variables
    
}
